uses data.String

component provides App requires io.Output out, data.IntUtil iu, net.TCPSocket,
                                net.TCPServerSocket,
                                data.json.JSONEncoder encoder,
                                data.json.JSONParser parser,
                                sort.Sort sort {

    int read_header(TCPSocket client){
        char buffer[]
        char header[]
        int size_file
        while(true){
            buffer = client.recv(1)
            if(buffer[0] == "\r"){
                size_file = iu.intFromString(header)
                break
            }
             //header = new char[](header, buffer)
             header= new char[]( header, buffer)
        }
        out.println(header)
        return size_file
    }

    char[] read_field(TCPSocket client){
        char buffer[]
        char field[]
        while(true){
            buffer = client.recv(1)
            if(buffer[0] == "\r"){
                return buffer
            }
              field = new char[](field, buffer)
        }
        return field
    }

    void readSocket(TCPSocket client){

        char payload[]
        int size_file = read_header(client)
        out.println("data size")
        payload = client.recv(size_file)
        out.println("data recived")
        //JSONElement rows[] = parser.parseDocument(payload)

        String list[] = encoder.jsonToArray(payload, typeof(String[]), null)
         out.println("sorting data")
        Data sorted[] = sort.sorting(list, String.[string], true)
        out.println("data sorted")
        char response[] = encoder.jsonFromArray(sorted,null)
        out.println(response)
        int file_size = response.arrayLength
        client.send(iu.intToString(file_size))
        client.send("\r")
        client.send(response)
        client.disconnect()
    }


	int App:main(AppParam params[]) {
		TCPServerSocket host = new TCPServerSocket()

		if (!host.bind(TCPServerSocket.ANY_ADDRESS, 2019)) {
			out.println("Error: failed to bind master socket")
			return 1
		}
		while (true) {
			TCPSocket client = new TCPSocket()
			if (client.accept(host)) {
                asynch::readSocket(client)
            }
		}
		return 0
	}
}
