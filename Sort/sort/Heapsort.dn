component provides sort.Sort  {

  Data elements[]
  int size
  TypeField tf

  void heapify(int n, int i){
      int largest = i
      int l = 2*i+1
      int r = 2*i+2
      if (l < n && elements[l]:.tf > elements[largest]:.tf) {
        /* code */
        largest = l
      }

      if (r < n && elements[r]:.tf > elements[largest]:.tf) {
        /* code */
        largest = r
      }
      if (largest != i) {
        /* code */
        swap(i,largest)
        heapify(n,largest)
      }
  }
  
  Data[] Sort:sorting(Data array[], TypeField field, bool ascending){
    elements= clone array
    size=elements.arrayLength
    tf = field
    for (int i = elements.arrayLength / 2 - 1; i >=0 ; i--) {
      /* code */
      heapify(elements.arrayLength  - 1 ,i)
      if (i == 0 ) {
        /* code */
        break
      }
    }

    for (int i = elements.arrayLength - 1; i >=0 ; i--) {
      /* code */
      swap(0,i)
      heapify(i,0)
      if (i == 0 ) {
        /* code */
        break
      }
    }

    return elements
  }



  void swap (int i, int j){
    Data k = elements[i]
    elements[i] = elements[j]
    elements[j] = k
  }

}
