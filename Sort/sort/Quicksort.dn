component provides sort.Sort requires io.Output out, data.IntUtil intU
{
  Data elements[]
  TypeField attribute

  Data[] Sort:sorting(Data array[], TypeField field, bool ascending){
    elements= clone array
    attribute=field


    if(elements.arrayLength <= 1) return null

    quicksort( 0, elements.arrayLength)

    return elements
  }

void snapshot(){
      for(int i=0; i<elements.arrayLength; i++)
      {
          out.println("$(elements[i]:.attribute)")
      }
}

  void quicksort(int start, int end){
    int i=start
    int j = end-1
    Data pivot=elements[(start+end)/2]
    Data aux

    while(i<=j){

      while(elements[i]:.attribute < pivot:.attribute && i < end)
      {
        i++
      }

      while(elements[j]:.attribute > pivot:.attribute && j > start)
      {
        j--
      }

      if(i <= j)
      {
        aux = elements[i]
        elements[i] = elements[j]
        elements[j] = aux
        i++
        j--
      }

      if(j > start)
		    quicksort( start, j+1)

      if(i < end)
		    quicksort( i, end)
    }
  }
}
