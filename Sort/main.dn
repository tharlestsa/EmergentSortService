uses data.String
uses reflect.Type

const char debugMSG[] = "[@EmergentSort]"
const char HELP[] 			 		= "help"
const char BUBBLESORT[]     = "bubble"
const char HEAPSORT[]       = "heap"
const char INSERTIONSORT[]  = "insert"
const char MERGESORT[]      = "merge"
const char QUICKSORT[]      = "quick"
const char SELECTIONSORT[]  = "selection"
const char EXIT[] 			 		= "exit"

data teste{
 int id
 char name[]
}

component provides App requires time.Timer tm, io.TextFile, sort.Sort sort, data.json.JSONEncoder parser,
io.Input in, io.Output out, data.IntUtil intU, data.StringUtil stringU{
      int App:main(AppParam params[])
      {
        TextFile f = new TextFile("log.txt", File.FILE_ACCESS_WRITE)

        teste op=new teste(0, "c")

        TypeField tipo=op.["name"]

        teste array[]=new teste[](new teste(0, "c"), new teste(4, "b"), new teste(5, "a"))

        teste retorno[]= sort.sorting(array, tipo, true)

        for(int i=0; i<retorno.arrayLength; i++){
           f.writeLine("$(retorno[i].name)")
         }

        return 0
      }
}
