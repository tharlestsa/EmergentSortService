const char debugMSG[] = "[@EmergentSort]"

const char HELP[] 			 		= "help"
const char BUBBLESORT[]     = "bubble"
const char HEAPSORT[]       = "heap"
const char INSERTIONSORT[]  = "insert"
const char MERGESORT[]      = "merge"
const char QUICKSORT[]      = "quick"
const char SELECTIONSORT[]  = "selection"
const char EXIT[] 			 		= "exit"

component provides App requires io.File, sort.Sort, data.json.JSONEncoder parser, io.Input in, io.Output out, data.IntUtil intU{
      int App:main(AppParam params[])
      {
        char cmd[] = "start"
        while (cmd != "exit") {
          if (cmd != "start") { commandInterpret(cmd)	}
			    out.print("$(debugMSG)> ")
			    cmd = in.readln()
        }
        //read json file
         File fd = new File("test_data.txt", File.FILE_ACCESS_READ)
         Data rows[] = parser.jsonToArray(fd.read(fd.getSize()), typeof(Data[]), null)

        return 0
      }

      void help() {
      		out.println("$(debugMSG) Command list:")
      		out.println(" $(debugMSG) $(HELP) - to list all commands")
      		out.println(" $(debugMSG) $(BUBBLESORT) sort test_data.txt with BUBBLESORT")
      		out.println(" $(debugMSG) $(HEAPSORT) sort test_data.txt with HEAPSORT")
      		out.println(" $(debugMSG) $(INSERTIONSORT) sort test_data.txt with INSERTIONSORT")
      		out.println(" $(debugMSG) $(MERGESORT) sort test_data.txt with MERGESORT")
      		out.println(" $(debugMSG) $(QUICKSORT) sort test_data.txt with QUICKSORT")
      		out.println(" $(debugMSG) $(SELECTIONSORT) sort test_data.text with SELECTIONSORT")
      		out.println(" $(debugMSG) $(EXIT) - to finish execution")
      	}

      void commandInterpret(char cmd[]) {
        if(cmd=="help"){
          help()
        }else if(cmd=="bubble"){

        }else if(cmd=="heap"){

        }else if(cmd=="insert"){

        }else if(cmd=="merge"){

        }else if(cmd=="quick"){

        }else if(cmd=="selection"){

        }else {
            out.print("Invalid command")
             out.print("$(debugMSG)> ")
        }
      }
  }
