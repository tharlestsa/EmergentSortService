data Row{
      dec values[]
}
component provides App requires data.DecUtil decU,data.IntUtil iu, io.Output out, io.File, data.json.JSONEncoder parser, UCB1.UCB ucb, time.Calendar ic, time.DateUtil du{
        int App:main(AppParam params[]){
          // open file test_data.txt in read mode
          File fd = new File("test_data.txt",File.FILE_ACCESS_READ)
          //parse the file in to rows
          Row rows[] = parser.jsonToArray(fd.read(fd.getSize()),typeof(Row[]),null)


          String actions[]
          //for each column set an string of action named a,b,c, ...
          for (int i = 0;i< rows[0].values.arrayLength;i++)
            actions = new String[](actions,new String("a"+i))

          ucb.setActions(actions)

          for (int i = 0;i < rows.arrayLength;i++){
            int a = ucb.getAction()
            DateTime start = ic.getTime()
            ucb.consumeData(rows[i].values[a])
            DateTime end = ic.getTime()
            int mills =  du.toMilliseconds(du.diff(start,end))
            out.println("action $(actions[a].string), time $(iu.intToString(mills)) ms")
          }
          dec max =rows[0].values[0]
          dec min =rows[0].values[0]
          for (int i = 0; i < rows.arrayLength; i++) {
            /* code */
            for (int j = 0; j < rows[0].values.arrayLength; j++) {
              /* code */
              if (max< = rows[i].values[j]) {
                /* code */
                max = rows[i].values[j]
              }
              if (min > = rows[i].values[j]) {
                /* code */
                min = rows[i].values[j]
              }
            }
          }

          return 0
        }






}
