uses data.String

component provides UCB requires data.DecUtil decU,data.IntUtil iu, io.Output out,util.Math math{
  dec max = 0.0
  dec min = 100.0
  String lerningActions[]
  dec rewards[]
  dec counts[]
  int totalCount
  int currentAction

  void UCB:setActions(String actions[]){
      lerningActions = actions
      rewards = new dec[actions.arrayLength]
      counts = new dec[actions.arrayLength]
  }
  int selectAction(){
    for (int i = 0; i < counts.arrayLength; i++) {
      /* code */
      if (counts[i]== 0.0) return i
    }
    dec maxVal = 0.0

    int maxInd = 0

    for (int i = 0; i < counts.arrayLength; i++) {
      /* UCB1 */
      dec bonus = math.sqrt((2.0 * math.natlog(totalCount))/counts[i])

      dec val = ((rewards[i] ))+bonus

      val = (val- 9.5118038073675112169) / (13.2793038073675112169 - 9.5118038073675112169)
      if (val > maxVal){
        maxVal = val
        maxInd = i
      }
      /*
      if (val > max){
        max = val
      }
      if (val < min){
        min = val

      }
      */

    }
     //out.println("rewards :largest $(decU.decToString(max)), smallest $(decU.decToString(min))")
    return maxInd
  }

  int UCB:getAction(){
    return currentAction
  }

  void  UCB:consumeData(dec reward){
    //update lernig state
    counts [currentAction]+=1.0
    dec n = counts[currentAction]
    dec value = rewards[currentAction]
    dec newValue = ((n - 1.0) / n) * value + (1.0 / n) * reward
    rewards[currentAction]=newValue
    totalCount++

    //choose new action
    currentAction = selectAction()
  }


}
