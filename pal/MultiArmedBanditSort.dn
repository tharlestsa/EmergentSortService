uses monitoring.BeingMonitored

data Row{
      dec values[]
}
const char IP[] = "localhost"
const int PORT 	= 2011

data Algo {
  Metric metrics[]
}

//dec maxInverted

component provides App requires  rest.RESys ,
                                 data.DecUtil decU,
                                 data.IntUtil iu,
                                 data.StringUtil StringU,
                                 io.Output out,
                                 io.File,
                                 data.json.JSONParser parser,
                                 data.json.JSONEncoder encoder,
                                 UCB1.UCB ucb,
                                 time.Calendar ic,
                                 time.DateUtil du,
                                 time.Timer timeT{
        int App:main(AppParam params[]){
          dec maxInverted = 0.0000001
          dec maxReward = 0.000000001
          RESys sys = new RESys(IP, PORT)
          out.println("Setting main...")
          sys.setMain("../Sort/server.o")
          out.println("Adding proxy...")
          //sys.addProxy("|../pal/monitoring/proxies/HTTPProxy.o|*(*:http.handler.GET.HTTPGET[0]:*)|")
          sys.addProxy("|../pal/monitoring/proxies/SortProxy.o|*(*:sort.Sort[0]:*)|")

          out.println("Starting collection cycle...")
          //String configs[] = sys.getAllConfigs()
          /* for (int count = 0; count < configs.arrayLength; count++) {
            sys.setConfig(configs[count].string)
            timeT.sleep(1000)
            out.println("Perception data ($(iu.intToString(count))): $(sys.getPerceptionData())")
          } */
          /*
          File fd = new File("test_data.txt",File.FILE_ACCESS_READ)
          //parse the file in to rows
          Row rows[] = parser.jsonToArray(fd.read(fd.getSize()),typeof(Row[]),null) */


          String actions[] = sys.getAllConfigs()

          String actionName[] = null
          for (int i = 0; i < actions.arrayLength; i++) {
            /* code */
            String explode1[]=StringU.explode(actions[i].string,"|")
            String explode2[]=StringU.explode(explode1[0].string,",")
            actionName = new String[](actionName,new String(explode2[explode2.arrayLength -1].string))
            //actionName[i]=explode2[explode2.arrayLength -1]
            //out.println(actions[i].string)
            out.println(actionName[i].string)
            //actionName[i]=stringU.explode([0].string,",")[action.arrayLength - 1]
          }
          //for each column set an string of action named a,b,c, ...
          /* for (int i = 0;i< configs.arrayLength;i++)
            actions = new String[](actions,new String("a"+i)) */

          ucb.setActions(actions)
          //Map map[] = new Map[](new Map("data", "data_"))

          int a = ucb.getAction()
          int lest = a
          sys.setConfig(actions[a].string)
          JSONElement perceptionData = parser.parseDocument(sys.getPerceptionData())
          char metricName[] = parser.getValueByDot("metrics[0].name", perceptionData).value
          char config[]     = parser.getValueByDot("metrics[0].config", perceptionData).value
          out.println (config)

          while(true){

            //out.println("$(sys.getPerceptionData())")

            perceptionData = parser.parseDocument(sys.getPerceptionData())
      			metricName = new char [](parser.getValueByDot("metrics[0].name", perceptionData).value)
            config     = new char [](parser.getValueByDot("metrics[0].config", perceptionData).value)

            if(metricName == "execution time"){

              dec actionConter = ucb.getCounts()
              int TotalConter  = ucb.getTotal()

      				int totalExecutionTime = iu.intFromString(parser.getValueByDot("metrics[0].value", perceptionData).value)
      				int count = iu.intFromString(parser.getValueByDot("metrics[0].count", perceptionData).value)

              //out.println("\nconfiguration $(iu.intToString(a)) , action counter $(decU.decToString(actionConter)) executions $(iu.intToString(TotalConter))")

              out.println("\nconfiguration $(actionName[a].string) , action counter $(decU.decToString(actionConter)) executions $(iu.intToString(TotalConter))")

      				dec averageExecutionTime = (0.0 + totalExecutionTime) / count
              dec reward =(1.0/averageExecutionTime)

      				out.println("[Reward] $(decU.decToString(reward)) proxy counts $(iu.intToString(count)) (avg time: $(decU.decToString(averageExecutionTime))ms)")
      				ucb.consumeData(reward)

      			}
            a = ucb.getAction()
            if (a!=lest){
              lest=a
              sys.setConfig(actions[a].string)
            }
            timeT.sleep(500)

          }


          return 0
        }
}
