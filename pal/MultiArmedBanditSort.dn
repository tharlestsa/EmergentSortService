uses monitoring.BeingMonitored

data Row{
      dec values[]
}
const char IP[] = "localhost"
const int PORT 	= 2011

data Algo {
  Metric metrics[]
}

component provides App requires  rest.RESys ,data.DecUtil decU,data.IntUtil iu, io.Output out, io.File, data.json.JSONEncoder parser, UCB1.UCB ucb, time.Calendar ic, time.DateUtil du,time.Timer timeT{
        int App:main(AppParam params[]){
          RESys sys = new RESys(IP, PORT)
          out.println("Setting main...")
          sys.setMain("../Sort/server.o")
          out.println("Adding proxy...")
          //sys.addProxy("|../pal/monitoring/proxies/HTTPProxy.o|*(*:http.handler.GET.HTTPGET[0]:*)|")
          sys.addProxy("|../pal/monitoring/proxies/SortProxy.o|*(*:sort.Sort[0]:*)|")

          out.println("Starting collection cycle...")
          //String configs[] = sys.getAllConfigs()
          /* for (int count = 0; count < configs.arrayLength; count++) {
            sys.setConfig(configs[count].string)
            timeT.sleep(1000)
            out.println("Perception data ($(iu.intToString(count))): $(sys.getPerceptionData())")
          } */
          /*
          File fd = new File("test_data.txt",File.FILE_ACCESS_READ)
          //parse the file in to rows
          Row rows[] = parser.jsonToArray(fd.read(fd.getSize()),typeof(Row[]),null) */


          String actions[]= sys.getAllConfigs()
          //for each column set an string of action named a,b,c, ...
          /* for (int i = 0;i< configs.arrayLength;i++)
            actions = new String[](actions,new String("a"+i)) */

          ucb.setActions(actions)
          Map map[] = new Map[](new Map("data", "data_"))


          for (int i = 0;i < 10;i++){
            int a = ucb.getAction()
            sys.setConfig(actions[a].string)

            timeT.sleep(1000)
            out.println("$(sys.getPerceptionData())")

            JSONElement perceptionData = parser.parseDocument(sys.getPerceptionData())

      			char metricName[] = parser.getValueByDot("metrics[0].name", perceptionData).value


            Algo algo = parser.jsonToData( sys.getPerceptionData(),typeof(Algo),0)
            //dec cost = algo.metrics[0].value/algo.metrics[0].counter
            //ucb.consumeData(1/cost)

            //int mills =  du.toMilliseconds(du.diff(start,end))
            //out.println("action $(actions[a].string)")
          }


          return 0
        }
}
